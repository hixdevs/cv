{"ast":null,"code":"import _slicedToArray from \"/Users/olga/Documents/coding/hixdevs/cv/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/olga/Documents/coding/hixdevs/cv/src/index.js\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BlobProvider } from \"@react-pdf/renderer\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport PSPDFKit from \"./components/pdf/PSPDFKit\"; // import ColsOneToTwo from \"./components/pdf/ColsOneToTwo\"\n// import ColsTwoToOne from \"./components/pdf/ColsTwoToOne\"\n\nimport ColsOneToOne from \"./components/pdf/ColsOneToOne\";\nimport data from \"./data/data.js\";\nimport ControlPanel from \"./components/control/ControlPanel\";\nimport { PdfThemeContext } from \"./hooks/usePdfTheme\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState } from \"react\";\nimport Component from \"./components/Component\";\nimport { createContext, useContext } from \"react\"; // export const PdfThemeContext = createContext()\n\nvar App = function App() {\n  var _useState = useState({\n    primary: \"#42413e\",\n    teranry: \"#fafafa\",\n    secondary: \"#c4ad93\",\n    textLight: \"#ffffff\",\n    textDark: \"#222222\",\n    link: \"#54b2ff\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      theme = _useState2[0],\n      setTheme = _useState2[1]; // const onChange = event => {\n  //   setTheme(prevState => ({\n  //     ...prevState,\n  //     [event.target.name]: event.target.value,\n  //   }))\n  // }\n\n\n  console.log(\"TENtheme:\", theme);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlobProvider, {\n    document: /*#__PURE__*/React.createElement(PdfThemeContext.Provider, {\n      value: theme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Component, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ColsOneToOne, {\n      data: data,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    })),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, function (_ref) {\n    var blob = _ref.blob,\n        url = _ref.url,\n        loading = _ref.loading,\n        error = _ref.error;\n\n    if (blob) {\n      return /*#__PURE__*/React.createElement(Container, {\n        fluid: \"xxl\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(ControlPanel, {\n        data: data,\n        onChange: onChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(PSPDFKit, {\n        blob: blob,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }))));\n    }\n\n    if (error) {\n      return error;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 18\n      }\n    }, \"The PDF is rendering...\");\n  }));\n};\n\nexport default App;\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }\n}), // <div>\n//   <PdfThemeContext.Provider value={theme}>\n//     <BlobProvider document={<ColsOneToOne data={data} />}>\n//       {({ blob, url, loading, error }) => {\n//         if (blob) {\n//           return (\n//             <Container fluid=\"xxl\">\n//               <Row>\n//                 <Col>\n//                   <ControlPanel data={data} />\n//                 </Col>\n//                 <Col>\n//                   <PSPDFKit blob={blob} />\n//                 </Col>\n//               </Row>\n//             </Container>\n//           )\n//         }\n//         if (error) {\n//           return error\n//         }\n//         return <div>The PDF is rendering...</div>\n//       }}\n//     </BlobProvider>\n//   </PdfThemeContext.Provider>\n// </div>,\ndocument.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/olga/Documents/coding/hixdevs/cv/src/index.js"],"names":["React","ReactDOM","BlobProvider","Container","Row","Col","PSPDFKit","ColsOneToOne","data","ControlPanel","PdfThemeContext","useState","Component","createContext","useContext","App","primary","teranry","secondary","textLight","textDark","link","theme","setTheme","console","log","blob","url","loading","error","onChange","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BlobProvider } from \"@react-pdf/renderer\"\nimport { Container, Row, Col } from \"react-bootstrap\"\nimport PSPDFKit from \"./components/pdf/PSPDFKit\"\n// import ColsOneToTwo from \"./components/pdf/ColsOneToTwo\"\n// import ColsTwoToOne from \"./components/pdf/ColsTwoToOne\"\nimport ColsOneToOne from \"./components/pdf/ColsOneToOne\"\nimport data from \"./data/data.js\"\nimport ControlPanel from \"./components/control/ControlPanel\"\nimport { PdfThemeContext } from \"./hooks/usePdfTheme\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { useState } from \"react\"\n\nimport Component from \"./components/Component\"\nimport { createContext, useContext } from \"react\"\n\n// export const PdfThemeContext = createContext()\n\nconst App = () => {\n  const [theme, setTheme] = useState({\n    primary: \"#42413e\",\n    teranry: \"#fafafa\",\n    secondary: \"#c4ad93\",\n    textLight: \"#ffffff\",\n    textDark: \"#222222\",\n    link: \"#54b2ff\",\n  })\n\n  // const onChange = event => {\n  //   setTheme(prevState => ({\n  //     ...prevState,\n  //     [event.target.name]: event.target.value,\n  //   }))\n  // }\n  console.log(\"TENtheme:\", theme)\n\n  return (\n    <div>\n      <BlobProvider\n        document={\n          <PdfThemeContext.Provider value={theme}>\n            <Component />\n            <ColsOneToOne data={data} />\n          </PdfThemeContext.Provider>\n        }\n      >\n        {({ blob, url, loading, error }) => {\n          if (blob) {\n            return (\n              <Container fluid=\"xxl\">\n                <Row>\n                  <Col>\n                    <ControlPanel data={data} onChange={onChange} />\n                  </Col>\n                  <Col>\n                    <PSPDFKit blob={blob} />\n                  </Col>\n                </Row>\n              </Container>\n            )\n          }\n          if (error) {\n            return error\n          }\n\n          return <div>The PDF is rendering...</div>\n        }}\n      </BlobProvider>\n    </div>\n  )\n}\n\nexport default App\n\nReactDOM.render(\n  <App />,\n  // <div>\n  //   <PdfThemeContext.Provider value={theme}>\n  //     <BlobProvider document={<ColsOneToOne data={data} />}>\n  //       {({ blob, url, loading, error }) => {\n  //         if (blob) {\n  //           return (\n  //             <Container fluid=\"xxl\">\n  //               <Row>\n  //                 <Col>\n  //                   <ControlPanel data={data} />\n  //                 </Col>\n  //                 <Col>\n  //                   <PSPDFKit blob={blob} />\n  //                 </Col>\n  //               </Row>\n  //             </Container>\n  //           )\n  //         }\n  //         if (error) {\n  //           return error\n  //         }\n\n  //         return <div>The PDF is rendering...</div>\n  //       }}\n  //     </BlobProvider>\n  //   </PdfThemeContext.Provider>\n  // </div>,\n  document.getElementById(\"root\"),\n)\n"]},"metadata":{},"sourceType":"module"}
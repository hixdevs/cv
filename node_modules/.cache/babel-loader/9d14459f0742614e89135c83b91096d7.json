{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/olga/Documents/coding/hixdevs/cv/src/components/pdf/Experience.jsx\";\n\nimport { View, Text, Link } from \"@react-pdf/renderer\";\nimport React from \"react\";\nimport createStyles from \"../../styles/pdf/Experience\";\nimport List, { Item } from \"./List\";\nimport { format } from \"date-fns\";\nimport usePdfTheme from \"../../hooks/usePdfTheme\";\n\nvar Experience = function Experience(_ref) {\n  var data = _ref.data;\n  console.log(\"data:\", data); // data.sort((a, b) => (a.years.start < b.years.start ? 1 : -1))x\n\n  var formatDate = function formatDate(date) {\n    return format(new Date(date), [\"MMM yyyy\"]);\n  };\n\n  var theme = usePdfTheme();\n  var styles = createStyles(theme);\n  return /*#__PURE__*/React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: styles.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Experience\"), /*#__PURE__*/React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, data.map(function (job, idx) {\n    return /*#__PURE__*/React.createElement(View, {\n      key: idx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      style: styles.company,\n      href: job.link,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, job.company), job.positions.map(function (position, idx) {\n      return /*#__PURE__*/React.createElement(View, {\n        key: idx,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(View, {\n        style: styles.header,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        style: styles.title,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 19\n        }\n      }, position.title), /*#__PURE__*/React.createElement(Text, {\n        style: styles.years,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 19\n        }\n      }, \"\".concat(formatDate(position.years.start), \" - \").concat(position.years.end === \"now\" ? \"Now\" : formatDate(position.years.end)))), /*#__PURE__*/React.createElement(List, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }\n      }, position.tasks.map(function (task, idx) {\n        return /*#__PURE__*/React.createElement(Item, {\n          key: idx,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }\n        }, task);\n      })));\n    }));\n  })));\n};\n\nexport default Experience;","map":{"version":3,"sources":["/Users/olga/Documents/coding/hixdevs/cv/src/components/pdf/Experience.jsx"],"names":["View","Text","Link","React","createStyles","List","Item","format","usePdfTheme","Experience","data","console","log","formatDate","date","Date","theme","styles","container","heading","map","job","idx","company","link","positions","position","header","title","years","start","end","tasks","task"],"mappings":"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","sourcesContent":["import { View, Text, Link } from \"@react-pdf/renderer\"\nimport React from \"react\"\nimport createStyles from \"../../styles/pdf/Experience\"\nimport List, { Item } from \"./List\"\nimport { format } from \"date-fns\"\nimport usePdfTheme from \"../../hooks/usePdfTheme\"\n\nconst Experience = ({ data }) => {\n  console.log(\"data:\", data)\n\n  // data.sort((a, b) => (a.years.start < b.years.start ? 1 : -1))x\n  const formatDate = date => format(new Date(date), [\"MMM yyyy\"])\n  const theme = usePdfTheme()\n  const styles = createStyles(theme)\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Experience</Text>\n      <View>\n        {data.map((job, idx) => (\n          <View key={idx}>\n            <Link style={styles.company} href={job.link}>\n              {job.company}\n            </Link>\n            {job.positions.map((position, idx) => (\n              <View key={idx}>\n                <View style={styles.header}>\n                  <Text style={styles.title}>{position.title}</Text>\n                  <Text style={styles.years}>{`${formatDate(\n                    position.years.start,\n                  )} - ${\n                    position.years.end === \"now\"\n                      ? \"Now\"\n                      : formatDate(position.years.end)\n                  }`}</Text>\n                </View>\n                <List>\n                  {position.tasks.map((task, idx) => (\n                    <Item key={idx}>{task}</Item>\n                  ))}\n                </List>\n              </View>\n            ))}\n          </View>\n        ))}\n      </View>\n      {/* <View>\n        {data.map((job, idx) => (\n          <View key={idx}>\n            <View style={styles.header}>\n              <Link style={styles.company} href={job.link}>\n                {job.company}\n              </Link>\n              <Text style={styles.years}>{`${formatDate(job.years.start)} - ${\n                job.years.end === \"now\" ? \"Now\" : formatDate(job.years.end)\n              }`}</Text>\n            </View>\n            <List>\n              {job.tasks.map((task, idx) => (\n                <Item style={styles.list} key={idx}>\n                  {task}\n                </Item>\n              ))}\n            </List>\n          </View>\n        ))}\n      </View> */}\n    </View>\n  )\n}\n\nexport default Experience\n"]},"metadata":{},"sourceType":"module"}